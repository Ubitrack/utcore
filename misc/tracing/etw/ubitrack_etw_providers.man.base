<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<!-- 
Copyright 2015 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

This files defines a set of ETW (Event Tracing for Windows) providers that can
be used to emit events into an ETW stream for recording with xperf or logman.
When used with the xperf kernel providers these can help investigate performance
problems by adding arbitrary context to the kernel data.

This file is built using the following custom build tool command line:
  mc.exe -um %(Filename)%(Extension) -z %(Filename)Generated 
The main outputs are:
  %(Filename)Generated.h;%(Filename)Generated.rc

The header file should be included by one or more source files, and the resource
file should either be added to your project or included into an existing resource
file.

The header file contains macros and functions to emit events. The 

For information on writing an instrumentation manifest see
http://msdn.microsoft.com/en-us/library/dd996930(VS.85).aspx
For more information on ETW see http://msdn.microsoft.com/en-us/magazine/cc163437.aspx
and http://msdn.microsoft.com/en-us/library/aa363668(VS.85).aspx

Documentation of the data types available for event payload templates is here:
http://msdn.microsoft.com/en-us/library/aa382774(v=VS.85).aspx

See also the Windows Platform SDK SimpleProvider and AdvancedProvider samples
and the Scenario library at http://archive.msdn.microsoft.com/Scenario
      
Before recording traces you need to execute these commands to register the provider:
xcopy /y ETWProviders.dll %temp%
wevtutil um etwprovider.man
wevtutil im etwprovider.man

The "wevtutul um" command is to unregister previous versions of these providers, to
allow arbitrary changes to be made. The copy to %temp% is because this file says, in
messageFileName and resourceFileName, that the file will be found in the %temp% directory.
Adjust that to match your games actual install path.
-->
<instrumentationManifest xmlns="http://schemas.microsoft.com/win/2004/08/events">
  <instrumentation
      xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <events xmlns="http://schemas.microsoft.com/win/2004/08/events">
      <!---
      This is the main provider to emit low to medium frequency information about performance.
      This includes Begin/End pairs, markers, and labeled thread IDs.

      @todo ETW Tracing providers file has hardcoded DLL name in it, but should be autgenerated based on cmake configuration
      -->
      <provider
          guid="{E59BFE42-2294-44C9-8FD0-B6FD0FDB21FF}"
          name="Ubitrack"
          symbol="UBITRACK"
          messageFileName="@NATIVE_INSTALL_PREFIX@\bin\utcore@UBITRACK_DLLVERSION@.dll"
          resourceFileName="@NATIVE_INSTALL_PREFIX@\bin\utcore@UBITRACK_DLLVERSION@.dll" >
        <templates>
          <template tid="T_Eventqueue_Dispatch_Begin">
            <data inType="win:Int32" name="EventDomain" />
            <data inType="win:Int64" name="Priority" />
            <data inType="win:AnsiString" name="ComponentName" />
            <data inType="win:AnsiString" name="PortName" />
          </template>
          <template tid="T_Eventqueue_Dispatch_End">
            <data inType="win:Int32" name="EventDomain" />
            <data inType="win:Int64" name="Priority" />
            <data inType="win:AnsiString" name="ComponentName" />
            <data inType="win:AnsiString" name="PortName" />
            <data inType="win:Float" name="Duration (ms)" />
          </template>
          <template tid="T_Eventqueue_Dispatch_Discard">
            <data inType="win:Int32" name="EventDomain" />
            <data inType="win:Int64" name="Priority" />
            <data inType="win:AnsiString" name="ComponentName" />
            <data inType="win:AnsiString" name="PortName" />
          </template>
          <template tid="T_Create_Measurement">
            <data inType="win:Int32" name="EventDomain" />
            <data inType="win:Int64" name="Priority" />
            <data inType="win:AnsiString" name="ComponentName" />
            <data inType="win:AnsiString" name="PortName" />
            <data inType="win:AnsiString" name="Text" />
          </template>
          <template tid="T_Receive_Measurement">
            <data inType="win:Int32" name="EventDomain" />
            <data inType="win:Int64" name="Priority" />
            <data inType="win:AnsiString" name="ComponentName" />
            <data inType="win:AnsiString" name="PortName" />
            <data inType="win:AnsiString" name="Text" />
          </template>
          <template tid="T_Vision_GPU_Upload">
            <data inType="win:Int64" name="Size" />
          </template>
          <template tid="T_Vision_GPU_Download">
            <data inType="win:Int64" name="Size" />
          </template>
          <template tid="T_Vision_Allocate_GPU">
            <data inType="win:Int64" name="Size" />
          </template>
          <template tid="T_Vision_Allocate_CPU">
            <data inType="win:Int64" name="Size" />
          </template>
          <template tid="T_Vision_Clone_GPU">
            <data inType="win:Int64" name="Size" />
          </template>
          <template tid="T_Vision_Clone_CPU">
            <data inType="win:Int64" name="Size" />
          </template>
        </templates>
        <keywords>
          <keyword name="HighFrequency" mask="0x2" />
          <keyword name="NormalFrequency" mask="0x1" />
        </keywords>
        <opcodes>
          <opcode name="DispatchBegin" symbol="_DispatchBeginOpcode" value="10"/>
          <opcode name="DispatchEnd" symbol="_DispatchEndOpcode" value="11"/>
          <opcode name="DispatchDiscard" symbol="_DispatchDiscardOpcode" value="12"/>
          <opcode name="CreateMeasurement" symbol="_CreateMeasurementOpcode" value="13"/>
          <opcode name="ReceiveMeasurement" symbol="_ReceiveMeasurementOpcode" value="14"/>
          <opcode name="VisionGpuUpload" symbol="_VisionGpuUploadOpcode" value="15"/>
          <opcode name="VisionGpuDownload" symbol="_VisionGpuDownloadOpcode" value="16"/>
          <opcode name="VisionAllocateGpu" symbol="_VisionAllocateGpuOpcode" value="17"/>
          <opcode name="VisionAllocateCpu" symbol="_VisionAllocateCpuOpcode" value="18"/>
          <opcode name="VisionCloneGpu" symbol="_VisionCloneGpuOpcode" value="19"/>
          <opcode name="VisionCloneCpu" symbol="_VisionCloneCpuOpcode" value="20"/>
        </opcodes>
        <tasks>
          <task name="UbitrackTrace" symbol="Ubitrack_Task" value="1" eventGUID="{866D02A3-1A29-4207-B710-E883C8F59851}"/>
        </tasks>
        <events>
          <event symbol="EventQueueDispatchBegin" template="T_Eventqueue_Dispatch_Begin" value="100" task="UbitrackTrace" opcode="DispatchBegin" keywords="HighFrequency" />
          <event symbol="EventQueueDispatchEnd" template="T_Eventqueue_Dispatch_End" value="101" task="UbitrackTrace" opcode="DispatchEnd" keywords="HighFrequency" />
          <event symbol="EventQueueDispatchDiscard" template="T_Eventqueue_Dispatch_Discard" value="102" task="UbitrackTrace" opcode="DispatchDiscard" keywords="HighFrequency" />
          <event symbol="CreateMeasurement" template="T_Create_Measurement" value="103" task="UbitrackTrace" opcode="CreateMeasurement" keywords="HighFrequency" />
          <event symbol="ReceiveMeasurement" template="T_Receive_Measurement" value="104" task="UbitrackTrace" opcode="ReceiveMeasurement" keywords="HighFrequency" />
          <event symbol="VisionGpuUpload" template="T_Vision_GPU_Upload" value="105" task="UbitrackTrace" opcode="VisionGpuUpload" keywords="NormalFrequency" />
          <event symbol="VisionGpuDownload" template="T_Vision_GPU_Download" value="106" task="UbitrackTrace" opcode="VisionGpuDownload" keywords="NormalFrequency" />
          <event symbol="VisionAllocateGpu" template="T_Vision_Allocate_GPU" value="107" task="UbitrackTrace" opcode="VisionAllocateGpu" keywords="NormalFrequency" />
          <event symbol="VisionAllocateCpu" template="T_Vision_Allocate_CPU" value="108" task="UbitrackTrace" opcode="VisionAllocateCpu" keywords="NormalFrequency" />
          <event symbol="VisionCloneGpu" template="T_Vision_Clone_GPU" value="109" task="UbitrackTrace" opcode="VisionCloneGpu" keywords="NormalFrequency" />
          <event symbol="VisionCloneCpu" template="T_Vision_Clone_CPU" value="110" task="UbitrackTrace" opcode="VisionCloneCpu" keywords="NormalFrequency" />
        </events>
      </provider>
    </events>
  </instrumentation>
</instrumentationManifest>
